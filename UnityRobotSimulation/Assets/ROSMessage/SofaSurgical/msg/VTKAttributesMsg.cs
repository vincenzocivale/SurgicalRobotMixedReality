//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.SofaSurgical
{
    [Serializable]
    public class VTKAttributesMsg : Message
    {
        public const string k_RosMessageName = "sofa_surgical_msgs/VTKAttributes";
        public override string RosMessageName => k_RosMessageName;

        //  VTKAttributes.msg
        //  Informazioni di base sul file VTK
        public string version;
        //  ad es. "vtk DataFile Version 2.0"
        public string title;
        //  il titolo o header del file
        public string file_format;
        //  "ASCII" oppure "BINARY"
        //  Tipo di dataset (es. "UNSTRUCTURED_GRID", "POLYDATA", ecc.)
        public string dataset_type;
        //  Geometria: elenco di punti
        public Geometry.PointMsg[] points;
        //  Dati delle celle appiattiti
        public int[] cell_indices;
        //  Gli offset (o le dimensioni) per recuperare ogni cella dalla lista appiattita
        public int[] cell_offsets;
        //  Tipi di cella: un intero per ogni cella (es. 10 per un tetraedro)
        public int[] cell_types;

        public VTKAttributesMsg()
        {
            this.version = "";
            this.title = "";
            this.file_format = "";
            this.dataset_type = "";
            this.points = new Geometry.PointMsg[0];
            this.cell_indices = new int[0];
            this.cell_offsets = new int[0];
            this.cell_types = new int[0];
        }

        public VTKAttributesMsg(string version, string title, string file_format, string dataset_type, Geometry.PointMsg[] points, int[] cell_indices, int[] cell_offsets, int[] cell_types)
        {
            this.version = version;
            this.title = title;
            this.file_format = file_format;
            this.dataset_type = dataset_type;
            this.points = points;
            this.cell_indices = cell_indices;
            this.cell_offsets = cell_offsets;
            this.cell_types = cell_types;
        }

        public static VTKAttributesMsg Deserialize(MessageDeserializer deserializer) => new VTKAttributesMsg(deserializer);

        private VTKAttributesMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.version);
            deserializer.Read(out this.title);
            deserializer.Read(out this.file_format);
            deserializer.Read(out this.dataset_type);
            deserializer.Read(out this.points, Geometry.PointMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.cell_indices, sizeof(int), deserializer.ReadLength());
            deserializer.Read(out this.cell_offsets, sizeof(int), deserializer.ReadLength());
            deserializer.Read(out this.cell_types, sizeof(int), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.version);
            serializer.Write(this.title);
            serializer.Write(this.file_format);
            serializer.Write(this.dataset_type);
            serializer.WriteLength(this.points);
            serializer.Write(this.points);
            serializer.WriteLength(this.cell_indices);
            serializer.Write(this.cell_indices);
            serializer.WriteLength(this.cell_offsets);
            serializer.Write(this.cell_offsets);
            serializer.WriteLength(this.cell_types);
            serializer.Write(this.cell_types);
        }

        public override string ToString()
        {
            return "VTKAttributesMsg: " +
            "\nversion: " + version.ToString() +
            "\ntitle: " + title.ToString() +
            "\nfile_format: " + file_format.ToString() +
            "\ndataset_type: " + dataset_type.ToString() +
            "\npoints: " + System.String.Join(", ", points.ToList()) +
            "\ncell_indices: " + System.String.Join(", ", cell_indices.ToList()) +
            "\ncell_offsets: " + System.String.Join(", ", cell_offsets.ToList()) +
            "\ncell_types: " + System.String.Join(", ", cell_types.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
